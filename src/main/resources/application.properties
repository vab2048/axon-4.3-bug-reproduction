#############################################################################################
#                                      Logging                                              #
#############################################################################################

logging.level.com.example.axon.bug=DEBUG

# hibernate.SQL: DEBUG=will show the SQL
#logging.level.org.hibernate.SQL=DEBUG

# BasicBinder: TRACE will show values which have been bound
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# For Spring JDBC (when using JDBCTemplate). TRACE will show SQL statements executed.
logging.level.org.springframework.jdbc.core=TRACE

# For JPA
logging.level.org.springframework.orm.jpa=INFO

# transaction.interceptor: will show when getting a transaction and completing a transaction
#logging.level.org.springframework.transaction.interceptor=TRACE

# logging at the transaction package will show output from the TransactionSynchronizationManager as well
#logging.level.org.springframework.transaction=TRACE

# For Axon
logging.level.org.axonframework=DEBUG

#############################################################################################
#                                   Axon specific                                           #
#############################################################################################

###########################
# Serialisers             #
###########################
# Possible values for the serialiser are: `default`, `xstream`, `java`, and `jackson`.

# The `events` serializer is in charge of de-/serializing event messages.
# These are stored in the event store.
axon.serializer.events=jackson

# The `messages` serializer is in charge of de-/serializing the command and query messages used
# in a distributed application set up.
axon.serializer.messages=jackson

# The `general` serializer is in charge of de-/serializing the remainder of Axon objects
# including the tokens, snapshots and sagas. Using jackson forces you to use jackson's
# java bean expectations (getters etc.) whereas xstream does not enforce the same constraints.
# So although xstream is more verbose it is also more flexible.
axon.serializer.general=jackson


########################################################################################################
#                                      Spring specific                                                 #
# See:                                                                                                 #
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html  #
########################################################################################################

# Our application exposes controllers and so we explicitly mark the need to embed a servlet web server.
spring.main.web-application-type=SERVLET

# Our application name.
spring.application.name=axon-bug-reproduction

####################################################################
#  Springdoc Openapi UI - Provides swagger UI                      #
####################################################################

# When the app is running access the page at http://localhost:8080/swagger-ui/index.html
# and input the site link: http://localhost:8080/api-docs/ to view our specific
# app's swagger-ui.
springdoc.api-docs.path=/api-docs

# Go to the page http://localhost:8080/swagger-ui.html to have our api-docs.path
# being shown as the UI.
springdoc.swagger-ui.path=/swagger-ui.html

####################################################################
#  DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties) #
####################################################################
# N.B. With Spring Boot 2, HikariCP is the default DataSource and ConnectionPool.

# Whether to stop if an error occurs while initializing the database.
spring.datasource.continue-on-error=false
# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.driver-class-name=org.postgresql.Driver
# Whether to generate a random datasource name.
spring.datasource.generate-unique-name=false
# Name of the datasource. Default to "testdb" when using an embedded database.
#spring.datasource.name=
# Login password of the database.
spring.datasource.password=password
# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# JDBC URL of the database. ${NAME:default_value} means use the environment variabe with the given NAME and
# if it is not present use our default value.
spring.datasource.url=jdbc:postgresql://${DB_HOSTNAME:localhost}:5432/${DB_NAME:axon_bug_reproduction}
# Login username of the database.
spring.datasource.username=postgres
# Always run schema.sql when starting the APP (it is idempotent so this should be fine).
spring.datasource.initialization-mode=always

####################################################################
#    JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)     #
####################################################################
# Bootstrap mode for JPA repositories.
spring.data.jpa.repositories.bootstrap-mode=default
# Whether to enable JPA repositories.
spring.data.jpa.repositories.enabled=true
# Name of the target database to operate on, auto-detected by default.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL95Dialect
# Whether to initialize the schema on startup.
spring.jpa.generate-ddl=false
# Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.
spring.jpa.hibernate.use-new-id-generator-mappings=true
# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for
# the entire processing of the request. We turn off this anti-pattern behaviour.
# See https://stackoverflow.com/a/48222934/5108875
spring.jpa.open-in-view=false

## Additional native properties to set on the JPA provider. ##
# none:        Do nothing
# create:      Drop existing schema on startup and recreate it from scratch
# create-drop: Do as create does but also drop schema when the Hibernate session is closed.
# validate:    Only validate that our entities match the schema, making no actual changes to the database.
spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.properties.hibernate.connection.autocommit=false

# Whether to enable logging of SQL statements issued from Hibernate/JPA.
spring.jpa.show-sql=false
# Format SQL which is logged out
spring.jpa.properties.hibernate.format_sql=false

